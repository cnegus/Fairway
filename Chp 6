Defensive Development

-Safety First! when writing software
  -make sre it keeps working
Version control means your code is always safe in a repository
You can undo mistakes, fix bugs, to new and old versions of software

Software Development isn't just about prioritization and estimation;
you've still got to write good, working, reliable code

SO! Version Control!:
  -often called configuration management,
  or CM for short
  -a tool that will keep track of changes to your files and help you
  coordinate different developers working on different parts of your system 
  at the same time
Lots of choices for version control software:
  -subversion
  -visual sourcesafe
  
Using Version Control
  1. Create repository
  2.Import your code to repository
NOW YOU CAN CHECK CODE IN/OUT
  1. Check out code
  2.Make changes
  3.Check in with message describing
  your changes
When merging code, nonconflicting code and methods are easy
Version Control software will combine files
But conflicting code is a problem
If a software can't merge two changes,
it issues a conflict
  -it will kick back and ask the user to fix the problems
Server Updates are important so that everyone gets the new files;
many developers update every morning to make sure they've
got the right files

Some version control software work in a "file
locking mode", where once a file is checked out, no one
else can check it out until the file is checked back in
Prevents conflict; only allows one editor at a time.
However, it also means some people are waiting
for the code before they can get their work done

Bugs to released version are usually a higher priority to the 
customer than implementing new features

Your bug fixes should affect released software and still be implemented
in "in progress" version of your software
Effective bug fixes depends on being able to locate specific versions
of your software and make changes to those version
without affecting current development

BALANCE IS KEY

"Trunk" the latest code by default
Version control software stores ALL your code 
Make sure you put descriptive messages every time you commit code to the 
version control system

Version control software stores all your code
If you're having a problem, don't wait for the next day;
grab everyone for an impromptu mtg
Tage where a version corresponds to a meaningful event like a release
or the end of an iteration
1.Create a directory for tags
2.Tag away
  -tells you where specific version are; no guessing/continuing back
DON'T COMMIT ANY CHANGES TO THAT TAG
If you want to commit changes; make a copy of the revised code
and commit changes there
Tag--snapshot of your code in the time
Branch--a place where you're working on code that isn't in the main development

1.Create directory for branches
2.Put copy of revision in branches directory

-A trunk is where your active development should go; it should always represent 
the latest version of your software
-A tag is a name attached to a specific version of the items in your repository
so that you can easily retrieve that revision later
-Sometimes you might need to commit the same changes to a branch and the turnk
if the change applies to both
-Branches are copies of your code that you can make changes to
without affecting code in the trunk. Branches often start from a tagged
version of the code
-Tags are static---you don't commit changes into them. Branches
are for changes that you don't want in the trunk (or to keep code away from changes
being made in the trunk)

BRANCH WHEN
-you have released a version of the software that you need to maintain
outside of the main development cycle
-you want to try some radical changes to the code that you might need to throw away;
changes that you don't want to affect the rest of team

DO NOT BRANCH WHEN:
-You can accomplish your goal by splitting code into different files or libraries
that can be built as appropriate on different platforms
-You have a bunch of developers that can't keep their code
compiling in the trunk so you try to give them their own sandbox to work in

BRANCH ONLY WHEN YOU ABSOLUTELY HAVE TO
  -each is a piece of software you have to maintain 

What version control does:
-let's you create a repository to keep your code in a single place to ease backup and recovery
-let's multiple people check out copies of the code and work effectively
as a team
-let's multiple people check changes back into the repository and distribute
them to the rest of the team
-keep track of who changes what, when and why
-branches and tags code so you can find and change versions of code from way back when
-rolls back changes that never should have happened in the first place

VERSION CONTROL DOESN'T 
-make sure your code compiles
-tests code
-thinks for you
-makes sure your code is readable and well-written

DEVELOPMENT TECHNIQUES
-use a version control tool to track and distribute changes in your software to
your team
-use tage to keep track of major milestones in your project (ends of
iterations, releases, bug fixes, etc)
-use branches to maintain a separate copy of your code, but only branche if absolutely
necessary
DEVELOPMENT PRINCIPLES
-always kown where changes should (and shouldn't) go
-know what code went into a given release--and be able to get to it again
-control code change and distribute

MISC
-back up your version control repository
-Always have good commit message; you and your team will appreciate it later
-use tags liberally
-commit frequently and be careful about breaking other people's code
-there are lots of GUI tools for version control systems 
they help a lot with merges and dealing with conflicts
