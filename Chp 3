Chp 3: Plannig for Success

-Customers want their software when they need it

If your estimate is over the customer's deadline, you should cut back and prioritize

THE CUSTOMER SETS THE PRIORITIES
-stay customer-focused
-ultimately, the customer has to make the choice
  -to help make the decision, lay out user stories, ten select the features needed to be delivered Milestone 1.0
  
Milestone 1.0 is your first major release of the software to the customer
  -this is the first time you'll actually deliver (as opposed to an iteration) and expect to get paid
  
Balance functionality with customer impatience
- help what can be done in time available

Don't get caught planning nice-to-haves
-milstone 1.0 is about delivering what's needed

Don't worry about length yet
-don't get caught up on how long user stories will take to develop

If the features don't fit, reprioritize:
To Reprioritize:
1. Cut out more functionality
  -Remove user stories that are not crucial
2. Ship a milestone build as soon as possible
  -aim to keep momentum up
3. Focus on the Baseline functionality
  -all about delivering just functionality that is needed for a working version
  
Difference between Milestone and Version:
  -MILESTONE: you get paid (most often), you deliver significant software
  -VERSION: a particular release (just a label)

Baseline functionality is the smallest set of features that need to be 
present in order to be at all useful to the customer and users

If you really can't meet a deadline,
just be honest and say that you can't meet it

If you add new team members, it will take time to bring tehm up to speed
on the project, software, decisions, and features. This means that they're
not being 100% productive

so adding a new person means reassessing the estimates

the maximum number of people in the team will depend on your project
and team---> you can get less productive with more people

~3 iterations to a milestone

Keep your software continuously building and your software always runnable so you can always
get feedback from the customer at the end of an iteration

KEEP ITERATIONS:
  -short
    -more chances to find and deal with changes
  -balanced
    -deal equally with change, new stuff, bugs, etc
    
Velocity is a percentage:
given X number of days, how much of that time is productive work?

Start with .7
  -its most likely that 70% of the employees' time wil be spent on the project
  
Velocity helps giet a realistic estimate of how long it will take

(Days of work)/ Velocity = days required to get work done

the days required to get work done should be bigger than original days of work to account for holidays, etc

A programmer wil give a "better-than -best-case estimate"
  -they assume a lot; they also take risks
  
Applying velocity at the beginning of the projject avoids complications
and missed deadlines

First apply your team velocity to each iteration

(# of people in your team) * (20 working days in your iteration) * (team's "first pass" velocity) = (amount of work team can handle in one iteration)

add up iterations to get milestone estimate

(amount of work team can handle) * 3 = (work days before milestone 1 needs to be shipped)

If you're still over the deadline, you need to reprioritize again

If you have fallen prey to this,
you must come clean as early as possible to the customer

When faced with an unhappy customer:
1. Add an iteration
  -explain that more can be done if another iteration is added--
  this means more time, but the customer gets the full result
2. Explain that work isn't lost, just moved back

3. Be transparent; explain how you calculated the time that you did.
  Maybe they'll understand

DON'T FUDGE YOUR ESTIMATES---leave breathing room

If there's a really long break before a Milestone, 
you may be able to add a small user story, but try to leave 2 or 3
days breathing room if possible

SOFTWARE DEVELOPMENT DASHBOARD
  -A big board on the wall of your office that you can use to 
  keep tabs on what work is in the pipeline, what's in progress
  and what's done.
  (see pg 100 for chart)
  
Personal lives matter
  -long hours affect your team's family life and happiness
  HAPPY = PRODUCTIVE
  
  -The more tired they are, the less productive their time is.
  Only about 3 hours are 100% productive
  
SO:
  -Prioritize Requirements
  -Deliver 1.0 as early as possible
  -IIterate once a month
  -If you are low on time, REPRIORITIZE
  -Incorporate velocity from the start
  -if you can't meet a deadline, explain why and be honest
  -set up a developer dashboard to stay organized and focused
  -
  
  keep your customers happy with a milestone 1.0 that you can achieve
  so you're sure of being paid and delivering on time
  
